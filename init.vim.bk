" ===================== GENERAL =============================
" Line numbers
:set number
:set relativenumber

" General settings
:set hidden
:set noerrorbells

"Indentation
:set tabstop=4 
:set softtabstop=4
:set shiftwidth=4
:set autoindent
:set expandtab

" Line Wraping
:set nowrap

" Search settings
:set ignorecase
:set smartcase
:set incsearch

" Cursor line
:set cursorline
:set mouse=a
:set scrolloff=8

" Split Options
:set splitright
:set splitbelow

" Clipboard
:set clipboard=unnamedplus

" Set mapleader
let mapleader = " "

" ===================== PLUGINS =============================
call plug#begin()

Plug 'https://github.com/preservim/nerdtree' " NerdTree
Plug 'https://github.com/tpope/vim-commentary' " For Commenting gcc & gc
Plug 'https://github.com/vim-airline/vim-airline' " Status barg
Plug 'https://github.com/ap/vim-css-color' " CSS Color Preview
Plug 'https://github.com/rafi/awesome-vim-colorschemes' " Retro Scheme
Plug 'https://github.com/ryanoasis/vim-devicons' " Developer Icons
Plug 'https://github.com/preservim/tagbar' " Tagbar for code navigation
Plug 'https://github.com/terryma/vim-multiple-cursors' " CTRL + N for multiple cursors
Plug 'https://github.com/jiangmiao/auto-pairs.git' 
Plug 'https://github.com/vim-airline/vim-airline-themes.git'
Plug 'https://github.com/tpope/vim-surround.git'

" Header for 42
Plug '42Paris/42header'

" LSP
Plug 'neovim/nvim-lspconfig'

" NEOVIM-CMP
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'

" Snips
Plug 'L3MON4D3/LuaSnip'
Plug 'saadparwaiz1/cmp_luasnip'

" Telescope
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', {'do': 'make'}

" Treesitter
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'p00f/nvim-ts-rainbow'

call plug#end()

" ===================== CONFIGURATIONS =============================
inoremap jk <Esc>

" Lazy moving
nnoremap <Leader>j :m .+1<CR>==
nnoremap <Leader>k :m .-2<CR>==

" Show hidden files on NERDTree
let NERDTreeShowHidden=1

" Remap NERDTree Toggle
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-f> :NERDTreeToggle<CR>

" Start NERDTree. If a file is specified, move the cursor to its window.
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Bind TagbarToggle to F8
nnoremap <F8> :TagbarToggle<CR>

" Remap Vim Split Navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-q> <C-w>q

"Resize splits
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>

" Tab Navigation
nnoremap <Leader>q :tabclose<CR>
nnoremap <Leader>l :tabnext<CR>
nnoremap <Leader>h :tabprev<CR>

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" Always open files in new tab
" autocmd VimEnter * tab all
" autocmd BufAdd * exe 'tablast | tabe "' . expand( "<afile") .'"'

:set completeopt-=preview " For No Previews

" Set colorscheme
" :colorscheme alduin 
" :colorscheme deus 
:colorscheme gruvbox 

" Air-line
let g:airline_theme="deus"
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Lua configurations 
lua require("fzarco")

" leader ff to find files - Telescope
nnoremap <leader>fd <cmd>lua require("telescope-config").curr_buff()<CR>
nnoremap <leader>ff <cmd>lua require("telescope-config").files()<CR>

" configure header fo 42
let g:user42 = 'fzarco-l'
let g:mail42 = 'fzarco-l@student.42.fr'
